<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlurryRoots.Runtime</name>
    </assembly>
    <members>
        <member name="T:BlurryRoots.BlurryBehaviour.CollisionEventType">
            <summary>
            Types of collision events.
            </summary>
        </member>
        <member name="T:BlurryRoots.BlurryBehaviour.HierachyEventType">
            <summary>
            Types of hierachy change events.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnAwake">
            <summary>
            OnAwake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnStart">
            <summary>
            OnStart is called on the frame when a script is enabled for the first
            time just before any of the Update methods is called. This won't be
            called again if component is deactivated and reactived again.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnVisibility(System.Boolean)">
            <summary>
            Is called when visiblity of the renderer has changed. 
            </summary>
            <param name="gained">Is false when the renderer is no longer visible
            by any camera, true when the renderer became visible by any camera.
            </param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnFocus(System.Boolean)">
            <summary>
            Gets called when focus of application has changed.
            </summary>
            <param name="gained">
            Is true if focus is gained, false when lost.
            </param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnPause">
            <summary>
            Gets called when application is paused.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnResume">
            <summary>
            Gets called when application is resumed.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnQuit">
            <summary>
            Gets called right before application is quit.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnActivate(System.Boolean)">
            <summary>
            Gets called when active state of the component has been changed.
            </summary>
            <param name="enabled">
            Is true when enabled, false when deactived.
            </param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnHierachyChange(BlurryRoots.BlurryBehaviour.HierachyEventType)">
            <summary>
            Gets called when something in the gameobjects hierachy has changed.
            </summary>
            <param name="type">Info weather parent or children have changed.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnLevelLoad(System.Int32)">
            <summary>
            Gets called when a level is loaded.
            </summary>
            <param name="level">Index number of level (scene) loaded.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnDispose">
            <summary>
            Gets called right before gameobject gets destroyed.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnFixedUpdate">
            <summary>
            Gets called within a fixed time frame.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnUpdate">
            <summary>
            Gets called every frame.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnLateUpdate">
            <summary>
            Gets called after the normal updates.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollide3D(BlurryRoots.BlurryBehaviour.CollisionEventType,UnityEngine.Collision)">
            <summary>
            Gets called if a 3D collision event happend.
            </summary>
            <param name="type">Collision type.</param>
            <param name="collision">Collsion information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollide2D(BlurryRoots.BlurryBehaviour.CollisionEventType,UnityEngine.Collision2D)">
            <summary>
            Gets called if a 2D collision event happend.
            </summary>
            <param name="type">Collision type.</param>
            <param name="collision">Collsion information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollideParticle(UnityEngine.GameObject)">
            <summary>
            Gets called when a collision event with a particle happens.
            </summary>
            <param name="other">Gameobject representing the particle.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollideCharacterController(UnityEngine.ControllerColliderHit)">
            <summary>
            Gets called when the controller hits a collider while performing a Move.
            This can be used to push objects when they collide with the character.
            </summary>
            <param name="hit"></param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTrigger3D(BlurryRoots.BlurryBehaviour.CollisionEventType,UnityEngine.Collider)">
            <summary>
            Gets called when a collision with a 3D trigger happens.
            </summary>
            <param name="type">Collision type.</param>
            <param name="collider">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTrigger2D(BlurryRoots.BlurryBehaviour.CollisionEventType,UnityEngine.Collider2D)">
            <summary>
            Gets called when a collision with a 2D trigger happens.
            </summary>
            <param name="type">Collision type.</param>
            <param name="collider">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnReset">
            <summary>
            Gets called when component values get reset. Only gets called in editor
            mode.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnGizmos(System.Boolean)">
            <summary>
            Gets called when gizmos are about to be drawn.
            </summary>
            <param name="selected">Is true if gameobject selected.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnValueChanged">
            <summary>
            Gets called when a value of this component gets changed in editor mode.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.#ctor">
            <summary>
            Creates a new BlurryBehaviour.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.Start">
            <summary>
            Start is called on the frame when a script is enabled just before any
            of the Update methods is called the first time.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnBecameVisible">
            <summary>
            OnBecameVisible is called when the renderer became visible by any
            camera.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnBecameInvisible">
            <summary>
            OnBecameInvisible is called when the renderer is no longer visible by
            any camera.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnEnable">
            <summary>
            This function is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnDisable">
            <summary>
            This function is called when the behaviour becomes disabled () or inactive.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTransformChildrenChanged">
            <summary>
            This function is called when the list of children of the transform of
            the GameObject has changed.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTransformParentChanged">
            <summary>
            This function is called when the parent property of the transform of
            the GameObject has changed.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnLevelWasLoaded(System.Int32)">
            <summary>
            This function is called after a new level was loaded.
            </summary>
            <param name="level">Level number which is loaded.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnDestroy">
            <summary>
            This function is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.FixedUpdate">
            <summary>
            This function is called every fixed framerate frame, if the
            MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.Update">
            <summary>
            Update is called every frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.LateUpdate">
            <summary>
            LateUpdate is called every frame, if the Behaviour is enabled.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnApplicationFocus(System.Boolean)">
            <summary>
            Sent to all game objects when the player gets or loses focus.
            </summary>
            <param name="lostFocus">Focus state.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnApplicationPause(System.Boolean)">
            <summary>
            Sent to all game objects when the player pauses.
            </summary>
            <param name="isPaused">Pause state.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnApplicationQuit">
            <summary>
            Sent to all game objects before the application is quit.
            </summary>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionEnter(UnityEngine.Collision)">
            <summary>
            OnCollisionEnter is called when this collider/rigidbody has begun touching another rigidbody/collider.
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionStay(UnityEngine.Collision)">
            <summary>
            OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionExit(UnityEngine.Collision)">
            <summary>
            	OnCollisionExit is called when this collider/rigidbody has stopped touching another rigidbody/collider.
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionEnter2D(UnityEngine.Collision2D)">
            <summary>
            Sent when an incoming collider makes contact with this object's collider (2D physics only).
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionStay2D(UnityEngine.Collision2D)">
            <summary>
            Sent each frame where a collider on another object is touching this object's collider (2D physics only).
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnCollisionExit2D(UnityEngine.Collision2D)">
            <summary>
            Sent when a collider on another object stops touching this object's collider (2D physics only).
            </summary>
            <param name="collision">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnParticleCollision(UnityEngine.GameObject)">
            <summary>
            OnParticleCollision is called when a particle hits a collider.
            </summary>
            <param name="other">Colliding particle game object.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnControllerColliderHit(UnityEngine.ControllerColliderHit)">
            <summary>
            OnControllerColliderHit is called when the controller hits a collider while performing a Move.
            </summary>
            <param name="hit">Hit information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerEnter(UnityEngine.Collider)">
            <summary>
            OnTriggerEnter is called when the Collider other enters the trigger.
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerStay(UnityEngine.Collider)">
            <summary>
            OnTriggerStay is called once per frame for every Collider other that is touching the trigger.
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerExit(UnityEngine.Collider)">
            <summary>
            OnTriggerExit is called when the Collider other has stopped touching the trigger.
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerEnter2D(UnityEngine.Collider2D)">
            <summary>
            Sent when another object enters a trigger collider attached to this object (2D physics only).
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerStay2D(UnityEngine.Collider2D)">
            <summary>
            Sent each frame where another object is within a trigger collider attached to this object (2D physics only).
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.OnTriggerExit2D(UnityEngine.Collider2D)">
            <summary>
            Sent when another object leaves a trigger collider attached to this object (2D physics only).
            </summary>
            <param name="other">Collision information.</param>
        </member>
        <member name="M:BlurryRoots.BlurryBehaviour.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="T:BlurryRoots.Commands.CommandQueue">
            <summary>
            Used to queue commands for later executaion.
            </summary>
        </member>
        <member name="M:BlurryRoots.Commands.CommandQueue.Enqueue(BlurryRoots.Commands.ICommand)">
            <summary>
            Enqueues given command into the queue.
            </summary>
            <param name="command">Command to enqueue.</param>
        </member>
        <member name="M:BlurryRoots.Commands.CommandQueue.Execute">
            <summary>
            Executes all queued commands.
            </summary>
        </member>
        <member name="M:BlurryRoots.Commands.CommandQueue.#ctor">
            <summary>
            Creates a new CommandQueue
            </summary>
        </member>
        <member name="F:BlurryRoots.Commands.CommandQueue.commands">
            <summary>
            Holding all queued commands.
            </summary>
        </member>
        <member name="T:BlurryRoots.Commands.ICommand">
            <summary>
            Describes a executable command.
            </summary>
        </member>
        <member name="M:BlurryRoots.Commands.ICommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="T:BlurryRoots.Commands.InvokeDelegateCommandDelegate">
            <summary>
            Callback type used by InvokeDelegateCommand.
            </summary>
        </member>
        <member name="T:BlurryRoots.Commands.InvokeDelegateCommand">
            <summary>
            Command used to invoke an InvokeDelegateCommandDelegate.
            </summary>
        </member>
        <member name="M:BlurryRoots.Commands.InvokeDelegateCommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:BlurryRoots.Commands.InvokeDelegateCommand.#ctor(BlurryRoots.Commands.InvokeDelegateCommandDelegate)">
            <summary>
            Creates a new InvokeDelegateCommand.
            </summary>
            <param name="callback">Callback to invoke on Execute.</param>
        </member>
        <member name="F:BlurryRoots.Commands.InvokeDelegateCommand.callback">
            <summary>
            Callback to invoke.
            </summary>
        </member>
        <member name="T:BlurryRoots.Common.EnumTypeEnumerator`1">
            <summary>
            Helper class used to iterate enum types.
            </summary>
            <typeparam name="TEnumType">Type of enum.</typeparam>
        </member>
        <member name="M:BlurryRoots.Common.EnumTypeEnumerator`1.GetValues">
            <summary>
            Get all enum fields as enumerable of strings.
            </summary>
            <returns>Enumerable of all fields as strings.</returns>
        </member>
        <member name="M:BlurryRoots.Common.EnumTypeEnumerator`1.GetRandomValue(System.Random)">
            <summary>
            Gets a random enum field.
            </summary>
            <param name="rng">Random number generator used to pick a field.</param>
            <returns>Randomly picked field.</returns>
        </member>
        <member name="M:BlurryRoots.Common.EnumTypeEnumerator`1.GetRandomAndConstraintValue(System.Random,System.Func{`0,System.Boolean})">
            <summary>
            Gets a random enum field, but with certain constraints.
            </summary>
            <param name="rng">Random number generator used to pick a field.</param>
            <param name="filter">Filter determaining if a value is passable or not.</param>
            <returns>Randomly picked field.</returns>
        </member>
        <member name="T:BlurryRoots.Common.TriggerCallback">
            <summary>
            Used by <see cref="T:BlurryRoots.Common.TimedTrigger"/> when time is up.
            </summary>
        </member>
        <member name="T:BlurryRoots.Common.TimedTrigger">
            <summary>
            Used to invoke callback when a ceratin amount of time has passed.
            </summary>
        </member>
        <member name="P:BlurryRoots.Common.TimedTrigger.IsActive">
            <summary>
            Gets or sets weather the trigger is active. Does not reset already passed time.
            </summary>
        </member>
        <member name="E:BlurryRoots.Common.TimedTrigger.TimeIsUp">
            <summary>
            Gets called when time is up.
            </summary>
        </member>
        <member name="P:BlurryRoots.Common.TimedTrigger.RemainingTime">
            <summary>
            Time remaining until trigger.
            </summary>
        </member>
        <member name="P:BlurryRoots.Common.TimedTrigger.HasTriggered">
            <summary>
            Indicates if trigger has already been triggered.
            </summary>
        </member>
        <member name="M:BlurryRoots.Common.TimedTrigger.Tick(System.Single)">
            <summary>
            Ticks a certain amount of time. Does nothing, if time has alread trigger.
            </summary>
            <param name="dt">Time to tick in seconds.</param>
        </member>
        <member name="M:BlurryRoots.Common.TimedTrigger.Reset">
            <summary>
            Resets the trigger to its inital state.
            </summary>
        </member>
        <member name="M:BlurryRoots.Common.TimedTrigger.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:BlurryRoots.Common.TimedTrigger"/>.
            </summary>
            <param name="timeToWait">Time in seconds to wait.</param>
            <param name="continous">Checks weather trigger should reset itself after triggering.</param>
        </member>
        <member name="F:BlurryRoots.Common.TimedTrigger.timeToWait">
            <summary>
            Time in seconds until trigger.
            </summary>
        </member>
        <member name="F:BlurryRoots.Common.TimedTrigger.passedTime">
            <summary>
            Time already passed.
            </summary>
        </member>
        <member name="F:BlurryRoots.Common.TimedTrigger.done">
            <summary>
            If trigger has already been triggerd.
            </summary>
        </member>
        <member name="F:BlurryRoots.Common.TimedTrigger.continousTriggering">
            <summary>
            Should trigger reset itself after triggering.
            </summary>
        </member>
        <member name="T:BlurryRoots.Storage.UniversalBase64DeSerializer">
            <summary>
            Serialized / Deserialized on creation.
            </summary>
            <typeparam name="TDataType">The type you want to (de)serialze.</typeparam>
        </member>
        <member name="P:BlurryRoots.Storage.UniversalBase64DeSerializer.Serialized">
            <summary>
            String representing the serialized data.
            </summary>
        </member>
        <member name="P:BlurryRoots.Storage.UniversalBase64DeSerializer.Data">
            <summary>
            Data corresponding to the serialized string.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.UniversalBase64DeSerializer.#ctor(System.Object)">
            <summary>
            Creates new Base64DeSerializer from data. Serialized the data on 
            construction.
            </summary>
            <param name="data">Data to be serialized.</param>
        </member>
        <member name="M:BlurryRoots.Storage.UniversalBase64DeSerializer.#ctor(System.String)">
            <summary>
            Creates a new Base64DeSerializer from a string representing base64
            serialized data. Gets deserialzed on construction.
            </summary>
            <param name="serialized">Base64 serialized data.</param>
        </member>
        <member name="M:BlurryRoots.Storage.UniversalBase64DeSerializer.DesializeFromBase64String(System.String)">
            <summary>
            Helper method do deserialized from string.
            </summary>
            <typeparam name="TData">Data type used to interpret data.</typeparam>
            <param name="serialized">Serialized string.</param>
            <returns>Deserialized data.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.UniversalBase64DeSerializer.SerializeToBase64String(System.Object)">
            <summary>
            Helper method used to serialized data to base64 encoded string.
            </summary>
            <typeparam name="TData">Data type of data to be serialized.</typeparam>
            <param name="data">Data to be serizaled.</param>
            <returns>Base64 encoded serialized data.</returns>
        </member>
        <member name="T:BlurryRoots.Storage.Base64DeSerializer`1">
            <summary>
            Serialized / Deserialized on creation.
            </summary>
            <typeparam name="TDataType">The type you want to (de)serialze.</typeparam>
        </member>
        <member name="P:BlurryRoots.Storage.Base64DeSerializer`1.Serialized">
            <summary>
            String representing the serialized data.
            </summary>
        </member>
        <member name="P:BlurryRoots.Storage.Base64DeSerializer`1.Data">
            <summary>
            Data corresponding to the serialized string.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.Base64DeSerializer`1.#ctor(`0)">
            <summary>
            Creates new Base64DeSerializer from data. Serialized the data on 
            construction.
            </summary>
            <param name="data">Data to be serialized.</param>
        </member>
        <member name="M:BlurryRoots.Storage.Base64DeSerializer`1.#ctor(System.String)">
            <summary>
            Creates a new Base64DeSerializer from a string representing base64
            serialized data. Gets deserialzed on construction.
            </summary>
            <param name="serialized">Base64 serialized data.</param>
        </member>
        <member name="M:BlurryRoots.Storage.Base64DeSerializer`1.DesializeFromBase64String``1(System.String)">
            <summary>
            Helper method do deserialized from string.
            </summary>
            <typeparam name="TData">Data type used to interpret data.</typeparam>
            <param name="serialized">Serialized string.</param>
            <returns>Deserialized data.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.Base64DeSerializer`1.SerializeToBase64String``1(``0)">
            <summary>
            Helper method used to serialized data to base64 encoded string.
            </summary>
            <typeparam name="TData">Data type of data to be serialized.</typeparam>
            <param name="data">Data to be serizaled.</param>
            <returns>Base64 encoded serialized data.</returns>
        </member>
        <member name="T:BlurryRoots.Storage.PreferenceStorage">
            <summary>
            Storage backend for project preferences.
            </summary>
        </member>
        <member name="T:BlurryRoots.Storage.PreferenceStorage.Defaults">
            <summary>
            Contains all default Values for storage functions.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorage.Defaults.Bool">
            <summary>
            Default value for bool storage.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorage.Defaults.Int">
            <summary>
            Default value for int storage.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorage.Defaults.Float">
            <summary>
            Default value for float storage.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorage.Defaults.String">
            <summary>
            Default value for string storage.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.DeleteAll">
            <summary>
            Removes all keys and values from the preferences. Use with caution.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.DeleteKey(System.String)">
            <summary>
            Removes key and its corresponding value from the preferences.
            </summary>
            <param name="key">Key to remove.</param>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.GetAllEntries">
            <summary>
            Returns an array with copies of all entries currently contained in the storage.
            </summary>
            <returns>Array of all entries.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.GetBool(System.String,System.Boolean)">
            <summary>
            Returns the value corresponding to key in the preference file if it exists.
            </summary>
            <param name="key">Key to retrive value for.</param>
            <param name="defaultValue">Default value to fallback if key is not contained in storage.</param>
            <returns></returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.GetInt(System.String,System.Int32)">
            <summary>
            Returns the value corresponding to key in the preference file if it exists.
            </summary>
            <param name="key">Key to retrive value for.</param>
            <param name="defaultValue">Default value to fallback if key is not contained in storage.</param>
            <returns></returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.GetFloat(System.String,System.Single)">
            <summary>
            Returns the value corresponding to key in the preference file if it exists.
            </summary>
            <param name="key">Key to retrive value for.</param>
            <param name="defaultValue">Default value to fallback if key is not contained in storage.</param>
            <returns></returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.GetString(System.String,System.String)">
            <summary>
            Returns the value corresponding to key in the preference file if it exists.
            </summary>
            <param name="key">Key to retrive value for.</param>
            <param name="defaultValue">Default value to fallback if key is not contained in storage.</param>
            <returns></returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.HasKey(System.String)">
            <summary>
            Returns true if key exists in the preferences.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>True if it exists. False otherwise.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the value of the preference identified by key.
            </summary>
            <param name="key">Key to set.</param>
            <param name="val">Value to be associated with the key.</param>
            <returns>Value which has just been stored.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.SetFloat(System.String,System.Single)">
            <summary>
            Sets the value of the preference identified by key.
            </summary>
            <param name="key">Key to set.</param>
            <param name="val">Value to be associated with the key.</param>
            <returns>Value which has just been stored.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.SetInt(System.String,System.Int32)">
            <summary>
            Sets the value of the preference identified by key.
            </summary>
            <param name="key">Key to set.</param>
            <param name="val">Value to be associated with the key.</param>
            <returns>Value which has just been stored.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.SetString(System.String,System.String)">
            <summary>
            Sets the value of the preference identified by key.
            </summary>
            <param name="key">Key to set.</param>
            <param name="val">Value to be associated with the key.</param>
            <returns>Value which has just been stored.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.#ctor">
            <summary>
            Creates a new ProjectPrefsStorage.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.SetOrCreate(System.String,BlurryRoots.Storage.PreferenceStorageEntry)">
            <summary>
            Sets or creates and sets a value in given dictionary.
            </summary>
            <typeparam name="TValue">Dictionary value type.</typeparam>
            <param name="key">Key to associate value with.</param>
            <param name="entry">Entry to set.</param>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorage.RemoveIfContainedBy``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            Removes given key from storage if it exists.
            </summary>
            <typeparam name="TValue">Type of storage value type.</typeparam>
            <param name="dict">Dictionary to remove value from.</param>
            <param name="key">Key to remove.</param>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorage.entries">
            <summary>
            Storage for entries.
            </summary>
        </member>
        <member name="T:BlurryRoots.Storage.PreferenceStorageEntry">
            <summary>
            Key value pair representing an entry in the project storage.
            </summary>
            <typeparam name="TValue">Type of the value stored.</typeparam>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.Key">
            <summary>
            Key value is associated with.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.Bool">
            <summary>
            Boolean value associated with Key.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.Int">
            <summary>
            Integer value associated with Key.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.Float">
            <summary>
            Float value associated with Key.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.String">
            <summary>
            String value associated with Key.
            </summary>
        </member>
        <member name="T:BlurryRoots.Storage.PreferenceStorageEntry.ValueType">
            <summary>
            Type of value.
            </summary>
        </member>
        <member name="F:BlurryRoots.Storage.PreferenceStorageEntry.Type">
            <summary>
            Type of value.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorageEntry.#ctor(System.String)">
            <summary>
            Create a new ProjectPrefsEntry.
            </summary>
            <param name="key">Key for lookup.</param>
        </member>
        <member name="M:BlurryRoots.Storage.PreferenceStorageEntry.#ctor(BlurryRoots.Storage.PreferenceStorageEntry)">
            <summary>
            Creates a copy.
            </summary>
            <param name="old">Object to copy.</param>
        </member>
        <member name="T:BlurryRoots.Storage.XMLDeSerializer`1">
            <summary>
            Serialized / Deserialized on creation.
            </summary>
            <typeparam name="TDataType">The type you want to (de)serialze.</typeparam>
        </member>
        <member name="P:BlurryRoots.Storage.XMLDeSerializer`1.Serialized">
            <summary>
            String representing the serialized data.
            </summary>
        </member>
        <member name="P:BlurryRoots.Storage.XMLDeSerializer`1.Data">
            <summary>
            Data corresponding to the serialized string.
            </summary>
        </member>
        <member name="M:BlurryRoots.Storage.XMLDeSerializer`1.#ctor(`0)">
            <summary>
            Creates a new XMLDeSerializer from a string representing XML
            serialized data. Gets deserialzed on construction.
            </summary>
            <param name="serialized">XML serialized data.</param>
        </member>
        <member name="M:BlurryRoots.Storage.XMLDeSerializer`1.#ctor(System.String)">
            <summary>
            Creates new XMLDeSerializer from data. Serialized the data on 
            construction.
            </summary>
            <param name="data">Data to be serialized.</param>
        </member>
        <member name="M:BlurryRoots.Storage.XMLDeSerializer`1.DserializeFromXMLString``1(System.String)">
            <summary>
            Helper method do deserialized from string.
            </summary>
            <typeparam name="TData">Data type used to interpret data.</typeparam>
            <param name="serialized">Serialized string.</param>
            <returns>Deserialized data.</returns>
        </member>
        <member name="M:BlurryRoots.Storage.XMLDeSerializer`1.SerializeToXMLString``1(``0)">
            <summary>
            Helper method used to serialized data to base64 encoded string.
            </summary>
            <typeparam name="TData">Data type of data to be serialized.</typeparam>
            <param name="data">Data to be serizaled.</param>
            <returns>Base64 encoded serialized data.</returns>
        </member>
        <member name="T:BlurryRoots.Events.EventBus">
            <summary>
            Manages event handler subscribtions and is responsible for raising, processing and distributing events.
            </summary>
        </member>
        <member name="M:BlurryRoots.Events.EventBus.Subscribe``1(BlurryRoots.Events.EventCallback{``0})">
            <summary>
            Subscribes the given callback for being notifed when event is dispatched.
            </summary>
            <typeparam name="TEventType">Event type to subscribe to.</typeparam>
            <param name="callback">Handler to subscribe.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventBus.Unsubscribe``1(BlurryRoots.Events.EventCallback{``0})">
            <summary>
            Stops the given callback from being notifed when event is dispatched.
            </summary>
            <typeparam name="TEventType">Event type to unsubscribe from.</typeparam>
            <param name="callback">Handler to unsubscribe.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventBus.Raise``1(``0)">
            <summary>
            Raises a new event. It is stored until <see cref="M:BlurryRoots.Events.EventBus.DispatchRaisedEvents"/> is called.
            </summary>
            <typeparam name="TEventType">Type of event to raise.</typeparam>
            <param name="e">New event.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventBus.DispatchRaisedEvents">
            <summary>
            Dispatches all previously raised events.
            </summary>
        </member>
        <member name="M:BlurryRoots.Events.EventBus.#ctor">
            <summary>
            Creates a new EventManager.
            </summary>
        </member>
        <member name="F:BlurryRoots.Events.EventBus.dispatchers">
            <summary>
            Holds all dispatchers.
            </summary>
        </member>
        <member name="T:BlurryRoots.Events.EventCallback`1">
            <summary>
            Delegate used to store events.
            </summary>
            <typeparam name="TEventType">Event type.</typeparam>
            <param name="e">Occuring event.</param>
        </member>
        <member name="T:BlurryRoots.Events.IEventDispatcher">
            <summary>
            Used to describe an event dispatcher.
            </summary>
        </member>
        <member name="T:BlurryRoots.Events.EventDispatcher`1">
            <summary>
            Helper class used for dispatching a specific type of event.
            </summary>
            <typeparam name="TEventType">Event type to dispatch.</typeparam>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.Subscribe(BlurryRoots.Events.EventCallback{`0})">
            <summary>
            Subscribes given callback to handle any event of type TEventType.
            </summary>
            <exception cref="T:System.Exception">Is thrown if callback has already been a subscriber.</exception>
            <param name="callback">New subscriber.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.Unsubscribe(BlurryRoots.Events.EventCallback{`0})">
            <summary>
            Unsubscribes given handler from this dispatcher.
            </summary>
            <exception cref="T:System.Exception">Is thrown if callback has not been a subscriber.</exception>
            <param name="callback">Subscriber to remove.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.Raise(`0)">
            <summary>
            Raises a new event. It is stored until <see cref="M:BlurryRoots.Events.EventDispatcher`1.DispatchRaisedEvents"/> is called.
            </summary>
            <param name="e">New event.</param>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.DispatchRaisedEvents">
            <summary>
            Dispatches event to all subscribers.
            </summary>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.#ctor">
            <summary>
            Creates a new EventDispatcher.
            </summary>
        </member>
        <member name="M:BlurryRoots.Events.EventDispatcher`1.Dispatch(`0)">
            <summary>
            Dispatches given event to all subscribed handlers.
            </summary>
            <param name="e">Event to process.</param>
        </member>
        <member name="F:BlurryRoots.Events.EventDispatcher`1.subscribers">
            <summary>
            Holds all subscribers.
            </summary>
        </member>
        <member name="F:BlurryRoots.Events.EventDispatcher`1.eventQueue">
            <summary>
            Event queue.
            </summary>
        </member>
        <member name="T:BlurryRoots.Events.EventBusSystem">
            <summary>
            System handling the processing and distribution of raised events.
            </summary>
        </member>
        <member name="T:BlurryRoots.Inputs.InputManager">
            <summary>
            Manager responsible for managing input state.
            </summary>
        </member>
        <member name="T:BlurryRoots.Inputs.InputManager.InputEventDelegate`1">
            <summary>
            Delegate used to register with input events.
            </summary>
            <typeparam name="TInputEvent">Type of input event.</typeparam>
            <param name="e">Input event.</param>
        </member>
        <member name="E:BlurryRoots.Inputs.InputManager.AxisChanged">
            <summary>
            Called when an axis has changed its value.
            </summary>
        </member>
        <member name="E:BlurryRoots.Inputs.InputManager.AxisUp">
            <summary>
            Called when an axis has changed its value to be more.
            </summary>
        </member>
        <member name="E:BlurryRoots.Inputs.InputManager.AxisDown">
            <summary>
            Called when an axis has changed its value to be less.
            </summary>
        </member>
        <member name="E:BlurryRoots.Inputs.InputManager.AxisPressed">
            <summary>
            Called when an axis has a value.
            </summary>
        </member>
        <member name="P:BlurryRoots.Inputs.InputManager.RegisteredAxes">
            <summary>
            Gets a list of all registered axes.
            </summary>
        </member>
        <member name="P:BlurryRoots.Inputs.InputManager.UnitySmoothing">
            <summary>
            Gets or sets if Unity should smoothe input axes.
            </summary>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.RegisterAxis(System.String)">
            <summary>
            Register a certain axis.
            </summary>
            <param name="name">Name of axis.</param>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.ClearRegistrations">
            <summary>
            Clears all registrations.
            </summary>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnUpdate">
            <summary>
            Updates the state of the input manager.
            </summary>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.#ctor">
            <summary>
            Creates a new <see cref="T:BlurryRoots.Inputs.InputManager"/>.
            </summary>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnAxisEvent``1(BlurryRoots.Inputs.InputManager.InputEventDelegate{``0},``0)">
            <summary>
            Tries to trigger an event handler (if one is present) with given event.
            </summary>
            <typeparam name="TInputEvent">Type of event to handle.</typeparam>
            <param name="handler">Handler responsible for event.</param>
            <param name="e">Event to handle.</param>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnAxisChanged(System.String,System.Single,System.Single)">
            <summary>
            Raises an <see cref="T:BlurryRoots.Inputs.InputAxisChangedEvent"/>.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <param name="prevValue">Previous value.</param>
            <param name="curValue">Current value.</param>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnAxisDown(System.String,System.Single)">
            <summary>
            Raises an <see cref="T:BlurryRoots.Inputs.InputAxisDownEvent"/>.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <param name="curValue">Current value.</param>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnAxisUp(System.String,System.Single)">
            <summary>
            Raises an <see cref="T:BlurryRoots.Inputs.InputAxisUpEvent"/>.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <param name="curValue">Current value.</param>
        </member>
        <member name="M:BlurryRoots.Inputs.InputManager.OnAxisPressed(System.String,System.Single)">
            <summary>
            Raises an <see cref="T:BlurryRoots.Inputs.InputAxisPressedEvent"/>.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <param name="curValue">Current value.</param>
        </member>
        <member name="F:BlurryRoots.Inputs.InputManager.axes">
            <summary>
            Stores the names and vaules of the axes to be processed
            </summary> 
        </member>
        <member name="T:BlurryRoots.Randomizer.Randomizer">
            <summary>
            Helper class for random number generation.
            </summary>
        </member>
        <member name="P:BlurryRoots.Randomizer.Randomizer.Global">
            <summary>
            Gets a reference to the global rng.
            </summary>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.CreateUniform">
            <summary>
            Creates a new independend rng with a uniform generation pattern.
            Seed from global rng is used to initialize this rng.
            </summary>
            <returns>A new rng.</returns>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.CreateUniform(System.Int32)">
            <summary>
            Creates a new independend rng with a uniform generation pattern.
            </summary>
            <param name="seed">Seed to init this rng.</param>
            <returns>A new rng.</returns>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.CreateNonUniform">
            <summary>
            Creates a new independend rng with a non-uniform generation pattern.
            </summary>
            <returns>A new rng.</returns>
        </member>
        <member name="P:BlurryRoots.Randomizer.Randomizer.Seed">
            <summary>
            Gets or sets the current seed used to generate numbers.
            </summary>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.Range(System.Int32,System.Int32)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.Range(System.Single,System.Single)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="M:BlurryRoots.Randomizer.Randomizer.Float">
            <summary>
            Generates a float in [0, 1].
            </summary>
            <returns>Float value.</returns>
        </member>
        <member name="F:BlurryRoots.Randomizer.Randomizer.globalRng">
            <summary>
            Holds static reference to global rng wrapper.
            </summary>
        </member>
        <member name="T:BlurryRoots.States.IState`1">
            <summary>
            Describes a state.
            </summary>
            <typeparam name="TTransitionEnum">Enum type identifying the state used on transition.</typeparam>
        </member>
        <member name="M:BlurryRoots.States.IState`1.OnEnter">
            <summary>
            Called when this state is entered.
            </summary>
        </member>
        <member name="M:BlurryRoots.States.IState`1.OnUpdate(System.Single)">
            <summary>
            Called when this state is updated.
            </summary>
            <param name="dt">Time since last update in seconds.</param>
            <returns>Enum identifying next state.</returns>
        </member>
        <member name="M:BlurryRoots.States.IState`1.OnExit">
            <summary>
            Called when this state exits.
            </summary>
        </member>
        <member name="T:BlurryRoots.States.StateManager`2">
            <summary>
            Manages states.
            </summary>
            <typeparam name="TTransitionEnum">Enum type representing the type of a state.</typeparam>
        </member>
        <member name="T:BlurryRoots.States.StateManager`2.StateChanagedEvent">
            <summary>
            Delegate used to handle a state change event.
            </summary>
            <param name="from">State exited.</param>
            <param name="to">State entered.</param>
        </member>
        <member name="E:BlurryRoots.States.StateManager`2.StateChanged">
            <summary>
            Gets invoked if state has been change.
            </summary>
        </member>
        <member name="P:BlurryRoots.States.StateManager`2.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="M:BlurryRoots.States.StateManager`2.OnUpdate(System.Single)">
            <summary>
            Updates the state machine.
            </summary>
            <param name="dt">Time since last update in seconds.</param>
        </member>
        <member name="M:BlurryRoots.States.StateManager`2.#ctor(`0)">
            <summary>
            Creates a new state.
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="M:BlurryRoots.States.StateManager`2.ChangeState(`0)">
            <summary>
            Changes the current state. Does nothing if given state equals current state.
            </summary>
            <param name="next">State to change to.</param>
        </member>
        <member name="M:BlurryRoots.States.StateManager`2.OnStateChanged(`0,`0)">
            <summary>
            Invokes the StateChanged event.
            </summary>
            <param name="from">State exited.</param>
            <param name="to">State entered.</param>
        </member>
        <member name="F:BlurryRoots.States.StateManager`2.state">
            <summary>
            Current state.
            </summary>
        </member>
        <member name="F:BlurryRoots.States.StateManager`2.statePool">
            <summary>
            Holds all state instances.
            </summary>
        </member>
        <member name="T:ComponentLocator`1">
            <summary>
            Helper class used to locate any type of component.
            </summary>
            <typeparam name="TComponentType">Type of component to locate.</typeparam>
        </member>
        <member name="M:ComponentLocator`1.LocateSingle">
            <summary>
            Locates exactly one component.
            </summary>
            <exception cref="T:UnityEngine.UnityException">Raised if more than one component of type TComponent exists.</exception>
            <returns>The located component.</returns>
        </member>
        <member name="M:ComponentLocator`1.LocateAll">
            <summary>
            Locates all components of given type.
            </summary>
            <returns>Array of all found components.</returns>
        </member>
        <member name="P:IRandomNumberGenerator.Seed">
            <summary>
            Gets or sets the current seed used to generate numbers.
            </summary>
        </member>
        <member name="M:IRandomNumberGenerator.Float">
            <summary>
            Generates a float in [0, 1].
            </summary>
            <returns>Float value.</returns>
        </member>
        <member name="M:IRandomNumberGenerator.Range(System.Int32,System.Int32)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="M:IRandomNumberGenerator.Range(System.Single,System.Single)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="P:UniformRandomNumberGenerator.Seed">
            <summary>
            Gets or sets the current seed used to generate numbers.
            </summary>
        </member>
        <member name="M:UniformRandomNumberGenerator.Range(System.Int32,System.Int32)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="M:UniformRandomNumberGenerator.Range(System.Single,System.Single)">
            <summary>
            Range value [min, max].
            </summary>
            <param name="min">Lower bound.</param>
            <param name="max">Upper bound.</param>
            <returns>Ranged value.</returns>
        </member>
        <member name="M:UniformRandomNumberGenerator.Float">
            <summary>
            Generates a float in [0, 1].
            </summary>
            <returns>Float value.</returns>
        </member>
        <member name="M:UniformRandomNumberGenerator.#ctor(System.Int32)">
            <summary>
            Creates a new rng with uniform generation patter. Seed is initalize from given number.
            </summary>
            <param name="seed">Seed to use for this rng.</param>
        </member>
    </members>
</doc>
